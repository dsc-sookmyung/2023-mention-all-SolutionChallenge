name: CI & Build and Deploy to GKE

on:
  push:
    branches: [ "release" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: asia-northeast3 
  GKE_CLUSTER: spring-backend    
  GKE_ZONE: asia-northeast3-a   
  DEPLOYMENT_NAME: cpr2u-app-deployment 
  REPOSITORY: cpr2u-backend 
  IMAGE: cpr2u

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
      
    - name: Checkout 2
      uses: actions/checkout@v3
    
    - name: Touch application.yml
      run: touch ./src/main/resources/application-local.properties
      
    - name: Echo application.yml
      run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application-local.properties

    - name: Cat application.yml
      run: cat ./src/main/resources/application-local.properties

    - name: Make Directory firebase
      run: mkdir ./src/main/resources/firebase

    - name: Touch firebase_service_key.json
      run: touch ./src/main/resources/firebase/firebase_service_key.json

    - name: create-firebase_service_key.json
      id: create-json
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "firebase_service_key.json"
        json: ${{ secrets.FIREBASE_SERVICE_KEY }}
        dir: './src/main/resources/firebase/'

    - name: Cat firebase_service_key.json
      run: cat ./src/main/resources/firebase/firebase_service_key.json

    - name: check directory
      run: ls -alR ./src/main/resources

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
#    - name: Build with Gradle test
#      run: ./gradlew test
      
    - name: Build with Gradle
      run: ./gradlew bootJar && ls -la ./build/libs/

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
