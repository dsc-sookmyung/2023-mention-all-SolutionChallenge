buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
}

group = 'com.mentionall'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.6'

	implementation 'com.google.firebase:firebase-admin:6.8.1'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'

	implementation 'com.twilio.sdk:twilio:8.8.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2:1.4.200'
}

sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
	test{
		java {
			srcDirs = ["$projectDir/src/test", "$projectDir/build/generated"]
		}
		resources {
			includes = ["$projectDir/src/test/resources/config/application.yml"]
		}
	}
}

test {
	classpath += sourceSets.test.output
}

bootJar {
	archiveFileName = 'app.jar'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
	finalizedBy 'jacocoTestCoverageVerification'
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled true
		html.enabled true

		xml.destination file("${buildDir}/jacoco/index.xml")
		csv.destination file("${buildDir}/jacoco/index.csv")
		html.destination file("${buildDir}/jacoco/index.html")
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Exception*',
							'**/dto/**',
							'**/controller/**'
					])
				})
		)
	}
}

jacocoTestCoverageVerification {
	var Qdomains = new ArrayList<String>()

	for (char qPattern = 'A'; qPattern <= 'Z'; qPattern++) {
		Qdomains.add("*.Q${qPattern}*")
	}

	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			excludes = Qdomains
		}
	}
}